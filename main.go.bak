package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/BurntSushi/toml"
	"github.com/rivo/tview"
)

type Config struct {
	Token string `toml:"token"`
	ID    int    `toml:"id"`
}

func main() {
	app := tview.NewApplication()
	pages := tview.NewPages()
	form := tview.NewForm()
	list := tview.NewList()

	pages.AddPage("login", form, true, true)
	pages.AddPage("courses", list, true, false)

	httpRequest := HttpRequest{}

	_, err := os.OpenFile("config.toml", os.O_CREATE|os.O_APPEND|os.O_RDWR, 0666)
	if err != nil {
		panic(err)
	}

	var conf Config
	raw, err := ioutil.ReadFile("config.toml")
	if err != nil {
		panic(err)
	}

	_, err = toml.Decode(string(raw), &conf)

	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v\n", conf)
	form.
		AddInputField("Username", "", 20, nil, nil).
		AddPasswordField("Password", "", 20, '*', nil).
		AddButton("Login", func() {
			username := form.GetFormItem(0).(*tview.InputField).GetText()
			password := form.GetFormItem(1).(*tview.InputField).GetText()
			token, _ := httpRequest.LoginScele(username, password)

			user, _ := httpRequest.GetSceleId(token.Token)

			if token.Token != "" {
				conf.Token = token.Token
				conf.ID = user.SceleID

				buf := new(bytes.Buffer)

				enc := toml.NewEncoder(buf)
				enc.Encode(conf)

				os.WriteFile("config.toml", []byte(buf.String()), 0666)
			}

			courses, _ := httpRequest.GetCourses(token.Token, user.SceleID)

			for _, course := range courses {
				list.AddItem(course.ShortName, "", '-', nil)
			}

			pages.SwitchToPage("courses")
		})

	form.SetBorder(true).SetTitle("Sceletui").SetTitleAlign(tview.AlignLeft)
	if err := app.SetRoot(pages, true).EnableMouse(true).Run(); err != nil {
		panic(err)
	}
}
